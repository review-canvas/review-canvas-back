plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'org.ec4j.editorconfig' version "${editorconfigVersion}"
    id 'com.google.cloud.tools.jib' version "${jibVersion}"
    id 'org.sonarqube' version "${sonarqubeVersion}"
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

group = "${projectGroup}"
version = "${applicationVersion}"

java {
    sourceCompatibility = "${javaVersion}"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// jacoco
jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            ''
                    ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }
    }
}

// editorconfigCheck 후 checkstyle 진행
check.dependsOn editorconfigCheck
editorconfig {
    excludes = ['build']
}

// checkstyle
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

checkstyle {
    toolVersion = "${checkstyleVersion}"
    maxWarnings = 0
    maxErrors = 0
    configFile = file("${checkstylePath}" + '/naver-checkstyle-rules.xml')
    configProperties = [suppressionFile: file("${checkstylePath}" + '/naver-checkstyle-suppressions.xml')]
}

// sonar
sonar {
    properties {
        property 'sonar.projectKey', 'review-canvas_review-canvas-back'
        property 'sonar.organization', 'review-canvas'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.java.checkstyle.reportPaths', 'build/reports/checkstyle/main.xml'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
    }
}

// jib
jib {
    from {
        image = "eclipse-temurin:17-jre"

        platforms {
            platform {
                architecture = "arm64"
                os = "linux"
            }
        }
    }
    to {
        image = "aws_account_id.dkr.ecr.region.amazonaws.com/${project.name}"
        tags = ["latest", "${project.version.toString()}"]
    }
    container {
        jvmFlags = ['-Dspring.profiles.active=local', '-XX:+UseContainerSupport']
        ports = ['8080']
    }
}
